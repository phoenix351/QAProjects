/*
 *
 *
 *       FILL IN EACH FUNCTIONAL TEST BELOW COMPLETELY
 *       -----[Keep the tests in the same order!]-----
 *
 */

const chaiHttp = require("chai-http");
const chai = require("chai");
const assert = chai.assert;
const server = require("../server");

let app;
before((done) => {
  app = server.listen(41085, () => {
    console.log("Test server is running on port 41085");
    done(); // Proceed once the server is ready
  });
});

after(() => {
  app.close(); // Clean up the server after tests
});

chai.use(chaiHttp);
suite("Functional Tests", function () {
  suite("Routing tests", function () {
    let createdId;
    suite(
      "POST /api/books with title => create book object/expect book object",
      function () {
        test("Test POST /api/books with title", function (done) {
          chai
            .request(app)
            .keepOpen()
            .post("/api/books")
            .send({ title: "New Interesting Book" })
            .end(function (err, res) {
              // console.log({ res });

              assert.equal(res.status, 200);
              assert.property(
                res.body,
                "title",
                "Books in array should contain title"
              );
              assert.property(
                res.body,
                "_id",
                "Books in array should contain _id"
              );
              createdId = res.body._id;
              done();
            });
        });

        test("Test POST /api/books with no title given", function (done) {
          chai
            .request(app)
            .keepOpen()
            .post("/api/books")
            .end(function (err, res) {
              assert.equal(res.status, 200);
              assert.equal(res.text, "missing required field title");
              done();
            });
        });
      }
    );

    suite("GET /api/books => array of books", function () {
      test("Test GET /api/books", function (done) {
        chai
          .request(app)
          .keepOpen()
          .get(`/api/books/`)
          .end(function (err, res) {
            assert.equal(res.status, 200);
            assert.isArray(res.body, "response should be an array");
            assert.property(
              res.body[0],
              "commentcount",
              "Books in array should contain commentcount"
            );
            assert.property(
              res.body[0],
              "title",
              "Books in array should contain title"
            );
            assert.property(
              res.body[0],
              "_id",
              "Books in array should contain _id"
            );
            done();
          });
      });
    });

    suite("GET /api/books/[id] => book object with [id]", function () {
      test("Test GET /api/books/[id] with id not in db", function (done) {
        chai
          .request(app)
          .keepOpen()
          .get(`/api/books/notValidId`)
          .end(function (err, res) {
            assert.equal(res.status, 200);
            assert.equal(res.text, "no book exists");
            done();
          });
      });

      test("Test GET /api/books/[id] with valid id in db", function (done) {
        chai
          .request(app)
          .keepOpen()
          .get(`/api/books/${createdId}`)
          .end(function (err, res) {
            assert.equal(res.status, 200);
            assert.isObject(res.body, "response should be an object");
            assert.property(
              res.body,
              "commentcount",
              "Book object should contain commentcount"
            );
            assert.property(
              res.body,
              "title",
              "Book object should contain title"
            );
            assert.property(res.body, "_id", "Book object should contain _id");
            done();
          });
      });
    });

    suite(
      "POST /api/books/[id] => add comment/expect book object with id",
      function () {
        test("Test POST /api/books/[id] with comment", function (done) {
          chai
            .request(app)
            .keepOpen()
            .post(`/api/books/${createdId}`)
            .send({
              comment: "Lorem Ipsum hehe",
            })
            .end(function (err, res) {
              assert.equal(res.status, 200);
              assert.isObject(res.body, "response should be an object");
              assert.property(
                res.body,
                "comments",
                "Book object should contain commentcount"
              );
              assert.property(
                res.body,
                "title",
                "Book object should contain title"
              );
              assert.property(
                res.body,
                "_id",
                "Book object should contain _id"
              );
              done();
            });
        });

        test("Test POST /api/books/[id] without comment field", function (done) {
          chai
            .request(app)
            .keepOpen()
            .post(`/api/books/${createdId}`)
            .end(function (err, res) {
              assert.equal(res.status, 200);
              assert.equal(res.text, "missing required field comment");
              done();
            });
        });

        test("Test POST /api/books/[id] with comment, id not in db", function (done) {
          chai
            .request(app)
            .keepOpen()
            .post("/api/books/invalidId")
            .end(function (err, res) {
              assert.equal(res.status, 200);
              assert.equal(res.text, "no book exists");
              done();
            });
        });
      }
    );

    suite("DELETE /api/books/[id] => delete book object id", function () {
      test("Test DELETE /api/books/[id] with valid id in db", function (done) {
        chai
          .request(app)
          .keepOpen()
          .delete(`/api/books/${createdId}`)
          .end(function (err, res) {
            assert.equal(res.status, 200);
            assert.equal(res.text, "delete successful");
            done();
          });
      });

      test("Test DELETE /api/books/[id] with  id not in db", function (done) {
        chai
          .request(app)
          .keepOpen()
          .delete(`/api/books/novalidids`)
          .send({ _id: createdId })
          .end(function (err, res) {
            assert.equal(res.status, 200);
            assert.equal(res.text, "no book exists");
            done();
          });
      });
    });
  });
});
